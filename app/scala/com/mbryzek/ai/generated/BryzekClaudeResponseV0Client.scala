/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.0.1
 * User agent: apibuilder app.apibuilder.io/bryzek/claude-response/latest/play_2_9_scala_3_client
 */
package com.bryzek.claude.response.v0.models {

  final case class ClaudeStep(
    explanation: String,
    output: String
  )

  final case class CommentsResponse(
    steps: Seq[com.bryzek.claude.response.v0.models.ClaudeStep],
    comments: Seq[String]
  )

  final case class Recommendation(
    category: String,
    confidence: Long
  )

  final case class RecommendationResponse(
    steps: Seq[com.bryzek.claude.response.v0.models.ClaudeStep],
    recommendations: Seq[com.bryzek.claude.response.v0.models.Recommendation]
  )

  final case class Recommendations(
    recommendations: Seq[com.bryzek.claude.response.v0.models.Recommendation]
  )

  final case class SingleInsightResponse(
    steps: Seq[com.bryzek.claude.response.v0.models.ClaudeStep],
    insight: String
  )

}

package com.bryzek.claude.response.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.bryzek.claude.response.v0.models.json._
    import com.bryzek.claude.v0.models.json._

    private[v0] implicit val jsonReadsUUID: play.api.libs.json.Reads[_root_.java.util.UUID] = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID: play.api.libs.json.Writes[_root_.java.util.UUID] = (x: _root_.java.util.UUID) => play.api.libs.json.JsString(x.toString)

    private[v0] implicit val jsonReadsJodaDateTime: play.api.libs.json.Reads[_root_.org.joda.time.DateTime] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime: play.api.libs.json.Writes[_root_.org.joda.time.DateTime] = (x: _root_.org.joda.time.DateTime) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
    }

    private[v0] implicit val jsonReadsJodaLocalDate: play.api.libs.json.Reads[_root_.org.joda.time.LocalDate] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate: play.api.libs.json.Writes[_root_.org.joda.time.LocalDate] = (x: _root_.org.joda.time.LocalDate) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
    }

    implicit def jsonReadsClaudeResponseClaudeStep: play.api.libs.json.Reads[com.bryzek.claude.response.v0.models.ClaudeStep] = {
      for {
        explanation <- (__ \ "explanation").read[String]
        output <- (__ \ "output").read[String]
      } yield ClaudeStep(explanation, output)
    }

    def jsObjectClaudeStep(obj: com.bryzek.claude.response.v0.models.ClaudeStep): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "explanation" -> play.api.libs.json.JsString(obj.explanation),
        "output" -> play.api.libs.json.JsString(obj.output)
      )
    }

    implicit def jsonWritesClaudeResponseClaudeStep: play.api.libs.json.Writes[ClaudeStep] = {
      (obj: com.bryzek.claude.response.v0.models.ClaudeStep) => {
        com.bryzek.claude.response.v0.models.json.jsObjectClaudeStep(obj)
      }
    }

    implicit def jsonReadsClaudeResponseCommentsResponse: play.api.libs.json.Reads[com.bryzek.claude.response.v0.models.CommentsResponse] = {
      for {
        steps <- (__ \ "steps").read[Seq[com.bryzek.claude.response.v0.models.ClaudeStep]]
        comments <- (__ \ "comments").read[Seq[String]]
      } yield CommentsResponse(steps, comments)
    }

    def jsObjectCommentsResponse(obj: com.bryzek.claude.response.v0.models.CommentsResponse): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "steps" -> play.api.libs.json.Json.toJson(obj.steps),
        "comments" -> play.api.libs.json.Json.toJson(obj.comments)
      )
    }

    implicit def jsonWritesClaudeResponseCommentsResponse: play.api.libs.json.Writes[CommentsResponse] = {
      (obj: com.bryzek.claude.response.v0.models.CommentsResponse) => {
        com.bryzek.claude.response.v0.models.json.jsObjectCommentsResponse(obj)
      }
    }

    implicit def jsonReadsClaudeResponseRecommendation: play.api.libs.json.Reads[com.bryzek.claude.response.v0.models.Recommendation] = {
      for {
        category <- (__ \ "category").read[String]
        confidence <- (__ \ "confidence").read[Long]
      } yield Recommendation(category, confidence)
    }

    def jsObjectRecommendation(obj: com.bryzek.claude.response.v0.models.Recommendation): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "category" -> play.api.libs.json.JsString(obj.category),
        "confidence" -> play.api.libs.json.JsNumber(obj.confidence)
      )
    }

    implicit def jsonWritesClaudeResponseRecommendation: play.api.libs.json.Writes[Recommendation] = {
      (obj: com.bryzek.claude.response.v0.models.Recommendation) => {
        com.bryzek.claude.response.v0.models.json.jsObjectRecommendation(obj)
      }
    }

    implicit def jsonReadsClaudeResponseRecommendationResponse: play.api.libs.json.Reads[com.bryzek.claude.response.v0.models.RecommendationResponse] = {
      for {
        steps <- (__ \ "steps").read[Seq[com.bryzek.claude.response.v0.models.ClaudeStep]]
        recommendations <- (__ \ "recommendations").read[Seq[com.bryzek.claude.response.v0.models.Recommendation]]
      } yield RecommendationResponse(steps, recommendations)
    }

    def jsObjectRecommendationResponse(obj: com.bryzek.claude.response.v0.models.RecommendationResponse): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "steps" -> play.api.libs.json.Json.toJson(obj.steps),
        "recommendations" -> play.api.libs.json.Json.toJson(obj.recommendations)
      )
    }

    implicit def jsonWritesClaudeResponseRecommendationResponse: play.api.libs.json.Writes[RecommendationResponse] = {
      (obj: com.bryzek.claude.response.v0.models.RecommendationResponse) => {
        com.bryzek.claude.response.v0.models.json.jsObjectRecommendationResponse(obj)
      }
    }

    implicit def jsonReadsClaudeResponseRecommendations: play.api.libs.json.Reads[com.bryzek.claude.response.v0.models.Recommendations] = {
      (__ \ "recommendations").read[Seq[com.bryzek.claude.response.v0.models.Recommendation]].map { x => Recommendations(recommendations = x) }
    }

    def jsObjectRecommendations(obj: com.bryzek.claude.response.v0.models.Recommendations): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "recommendations" -> play.api.libs.json.Json.toJson(obj.recommendations)
      )
    }

    implicit def jsonWritesClaudeResponseRecommendations: play.api.libs.json.Writes[Recommendations] = {
      (obj: com.bryzek.claude.response.v0.models.Recommendations) => {
        com.bryzek.claude.response.v0.models.json.jsObjectRecommendations(obj)
      }
    }

    implicit def jsonReadsClaudeResponseSingleInsightResponse: play.api.libs.json.Reads[com.bryzek.claude.response.v0.models.SingleInsightResponse] = {
      for {
        steps <- (__ \ "steps").read[Seq[com.bryzek.claude.response.v0.models.ClaudeStep]]
        insight <- (__ \ "insight").read[String]
      } yield SingleInsightResponse(steps, insight)
    }

    def jsObjectSingleInsightResponse(obj: com.bryzek.claude.response.v0.models.SingleInsightResponse): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "steps" -> play.api.libs.json.Json.toJson(obj.steps),
        "insight" -> play.api.libs.json.JsString(obj.insight)
      )
    }

    implicit def jsonWritesClaudeResponseSingleInsightResponse: play.api.libs.json.Writes[SingleInsightResponse] = {
      (obj: com.bryzek.claude.response.v0.models.SingleInsightResponse) => {
        com.bryzek.claude.response.v0.models.json.jsObjectSingleInsightResponse(obj)
      }
    }
  }
}

package com.bryzek.claude.response.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package com.bryzek.claude.response.v0 {

  object Constants {

    val Namespace = "com.bryzek.claude.response.v0"
    val UserAgent = "apibuilder app.apibuilder.io/bryzek/claude-response/latest/play_2_9_scala_3_client"
    val Version = "0.0.1"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[com.bryzek.claude.response.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import com.bryzek.claude.response.v0.models.json._
    import com.bryzek.claude.v0.models.json._

    private val logger = play.api.Logger("com.bryzek.claude.response.v0.Client")

    logger.info(s"Initializing com.bryzek.claude.response.v0.Client for url $baseUrl")





    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method '$url'")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' '$url'")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    ): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      import play.api.libs.ws.WSBodyWritables.writeableOf_JsValue

      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders*).addQueryStringParameters(queryParameters*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders)*).addQueryStringParameters(queryParameters*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders)*).addQueryStringParameters(queryParameters*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders*).addQueryStringParameters(queryParameters*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders*).addQueryStringParameters(queryParameters*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders*).addQueryStringParameters(queryParameters*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders*).addQueryStringParameters(queryParameters*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders*).addQueryStringParameters(queryParameters*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq("Content-Type" -> "application/json; charset=UTF-8")
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw com.bryzek.claude.response.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String

    }

  }



  package errors {

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}