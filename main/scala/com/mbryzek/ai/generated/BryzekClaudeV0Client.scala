/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.7.61
 * User agent: apibuilder app.apibuilder.io/bryzek/claude/latest/play_2_9_scala_3_client
 */
package com.bryzek.claude.v0.models {

  final case class ClaudeContent(
    `type`: com.bryzek.claude.v0.models.ClaudeContentType,
    text: String
  )

  final case class ClaudeError(
    message: String,
    raw: _root_.scala.Option[String] = None
  )

  final case class ClaudeErrorResponse(
    error: com.bryzek.claude.v0.models.ClaudeError
  )

  final case class ClaudeMessage(
    role: com.bryzek.claude.v0.models.ClaudeRole,
    content: Seq[com.bryzek.claude.v0.models.ClaudeContent]
  )

  final case class ClaudeRequest(
    model: com.bryzek.claude.v0.models.ClaudeModel,
    messages: Seq[com.bryzek.claude.v0.models.ClaudeMessage],
    maxTokens: Long = 30000L,
    temperature: _root_.scala.Option[BigDecimal] = None,
    system: _root_.scala.Option[String] = None
  )

  final case class ClaudeResponse(
    id: String,
    `type`: String,
    role: com.bryzek.claude.v0.models.ClaudeRole,
    content: Seq[com.bryzek.claude.v0.models.ClaudeResponseContent],
    model: com.bryzek.claude.v0.models.ClaudeModel,
    stopReason: com.bryzek.claude.v0.models.ClaudeStopReason,
    stopSequence: _root_.scala.Option[String] = None,
    usage: com.bryzek.claude.v0.models.ClaudeUsage
  )

  final case class ClaudeResponseContent(
    `type`: com.bryzek.claude.v0.models.ClaudeContentType,
    text: String
  )

  final case class ClaudeUsage(
    inputTokens: Long,
    outputTokens: Long
  )

  final case class Message(
    placeholder: _root_.scala.Option[String] = None
  )
  sealed trait ClaudeContentType extends _root_.scala.Product with _root_.scala.Serializable

  object ClaudeContentType {

    case object Text extends ClaudeContentType { override def toString = "text" }
    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends ClaudeContentType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[ClaudeContentType] = scala.List(Text)

    private
    val byName: Map[String, ClaudeContentType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ClaudeContentType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ClaudeContentType] = byName.get(value.toLowerCase)

  }

  sealed trait ClaudeModel extends _root_.scala.Product with _root_.scala.Serializable

  object ClaudeModel {

    case object ClaudeSonnet420250514 extends ClaudeModel { override def toString = "claude-sonnet-4-20250514" }
    case object ClaudeOpus4120250805 extends ClaudeModel { override def toString = "claude-opus-4-1-20250805" }
    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends ClaudeModel

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[ClaudeModel] = scala.List(ClaudeSonnet420250514, ClaudeOpus4120250805)

    private
    val byName: Map[String, ClaudeModel] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ClaudeModel = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ClaudeModel] = byName.get(value.toLowerCase)

  }

  sealed trait ClaudeRole extends _root_.scala.Product with _root_.scala.Serializable

  object ClaudeRole {

    case object User extends ClaudeRole { override def toString = "user" }
    case object Assistant extends ClaudeRole { override def toString = "assistant" }
    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends ClaudeRole

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[ClaudeRole] = scala.List(User, Assistant)

    private
    val byName: Map[String, ClaudeRole] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ClaudeRole = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ClaudeRole] = byName.get(value.toLowerCase)

  }

  sealed trait ClaudeStopReason extends _root_.scala.Product with _root_.scala.Serializable

  object ClaudeStopReason {

    case object EndTurn extends ClaudeStopReason { override def toString = "end_turn" }
    case object MaxTokens extends ClaudeStopReason { override def toString = "max_tokens" }
    case object StopSequence extends ClaudeStopReason { override def toString = "stop_sequence" }
    case object ToolUse extends ClaudeStopReason { override def toString = "tool_use" }
    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends ClaudeStopReason

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[ClaudeStopReason] = scala.List(EndTurn, MaxTokens, StopSequence, ToolUse)

    private
    val byName: Map[String, ClaudeStopReason] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ClaudeStopReason = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ClaudeStopReason] = byName.get(value.toLowerCase)

  }

}

package com.bryzek.claude.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.bryzek.claude.v0.models.json._

    private[v0] implicit val jsonReadsUUID: play.api.libs.json.Reads[_root_.java.util.UUID] = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID: play.api.libs.json.Writes[_root_.java.util.UUID] = (x: _root_.java.util.UUID) => play.api.libs.json.JsString(x.toString)

    private[v0] implicit val jsonReadsJodaDateTime: play.api.libs.json.Reads[_root_.org.joda.time.DateTime] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime: play.api.libs.json.Writes[_root_.org.joda.time.DateTime] = (x: _root_.org.joda.time.DateTime) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
    }

    private[v0] implicit val jsonReadsJodaLocalDate: play.api.libs.json.Reads[_root_.org.joda.time.LocalDate] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate: play.api.libs.json.Writes[_root_.org.joda.time.LocalDate] = (x: _root_.org.joda.time.LocalDate) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
    }

    implicit val jsonReadsClaudeClaudeContentType: play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeContentType] = new play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeContentType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.bryzek.claude.v0.models.ClaudeContentType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.bryzek.claude.v0.models.ClaudeContentType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.claude.v0.models.ClaudeContentType(v))
              case err: play.api.libs.json.JsError =>
                (js \ "claude_content_type").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.claude.v0.models.ClaudeContentType(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesClaudeClaudeContentType(obj: com.bryzek.claude.v0.models.ClaudeContentType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectClaudeContentType(obj: com.bryzek.claude.v0.models.ClaudeContentType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesClaudeClaudeContentType: play.api.libs.json.Writes[ClaudeContentType] = {
      (obj: com.bryzek.claude.v0.models.ClaudeContentType) => {
        com.bryzek.claude.v0.models.json.jsonWritesClaudeClaudeContentType(obj)
      }
    }

    implicit val jsonReadsClaudeClaudeModel: play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeModel] = new play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeModel] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.bryzek.claude.v0.models.ClaudeModel] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.bryzek.claude.v0.models.ClaudeModel(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.claude.v0.models.ClaudeModel(v))
              case err: play.api.libs.json.JsError =>
                (js \ "claude_model").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.claude.v0.models.ClaudeModel(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesClaudeClaudeModel(obj: com.bryzek.claude.v0.models.ClaudeModel) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectClaudeModel(obj: com.bryzek.claude.v0.models.ClaudeModel) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesClaudeClaudeModel: play.api.libs.json.Writes[ClaudeModel] = {
      (obj: com.bryzek.claude.v0.models.ClaudeModel) => {
        com.bryzek.claude.v0.models.json.jsonWritesClaudeClaudeModel(obj)
      }
    }

    implicit val jsonReadsClaudeClaudeRole: play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeRole] = new play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeRole] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.bryzek.claude.v0.models.ClaudeRole] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.bryzek.claude.v0.models.ClaudeRole(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.claude.v0.models.ClaudeRole(v))
              case err: play.api.libs.json.JsError =>
                (js \ "claude_role").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.claude.v0.models.ClaudeRole(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesClaudeClaudeRole(obj: com.bryzek.claude.v0.models.ClaudeRole) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectClaudeRole(obj: com.bryzek.claude.v0.models.ClaudeRole) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesClaudeClaudeRole: play.api.libs.json.Writes[ClaudeRole] = {
      (obj: com.bryzek.claude.v0.models.ClaudeRole) => {
        com.bryzek.claude.v0.models.json.jsonWritesClaudeClaudeRole(obj)
      }
    }

    implicit val jsonReadsClaudeClaudeStopReason: play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeStopReason] = new play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeStopReason] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.bryzek.claude.v0.models.ClaudeStopReason] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.bryzek.claude.v0.models.ClaudeStopReason(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.claude.v0.models.ClaudeStopReason(v))
              case err: play.api.libs.json.JsError =>
                (js \ "claude_stop_reason").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.claude.v0.models.ClaudeStopReason(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesClaudeClaudeStopReason(obj: com.bryzek.claude.v0.models.ClaudeStopReason) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectClaudeStopReason(obj: com.bryzek.claude.v0.models.ClaudeStopReason) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesClaudeClaudeStopReason: play.api.libs.json.Writes[ClaudeStopReason] = {
      (obj: com.bryzek.claude.v0.models.ClaudeStopReason) => {
        com.bryzek.claude.v0.models.json.jsonWritesClaudeClaudeStopReason(obj)
      }
    }

    implicit def jsonReadsClaudeClaudeContent: play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeContent] = {
      for {
        `type` <- (__ \ "type").read[com.bryzek.claude.v0.models.ClaudeContentType]
        text <- (__ \ "text").read[String]
      } yield ClaudeContent(`type`, text)
    }

    def jsObjectClaudeContent(obj: com.bryzek.claude.v0.models.ClaudeContent): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "text" -> play.api.libs.json.JsString(obj.text)
      )
    }

    implicit def jsonWritesClaudeClaudeContent: play.api.libs.json.Writes[ClaudeContent] = {
      (obj: com.bryzek.claude.v0.models.ClaudeContent) => {
        com.bryzek.claude.v0.models.json.jsObjectClaudeContent(obj)
      }
    }

    implicit def jsonReadsClaudeClaudeError: play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeError] = {
      for {
        message <- (__ \ "message").read[String]
        raw <- (__ \ "raw").readNullable[String]
      } yield ClaudeError(message, raw)
    }

    def jsObjectClaudeError(obj: com.bryzek.claude.v0.models.ClaudeError): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "message" -> play.api.libs.json.JsString(obj.message)
      ) ++ (obj.raw match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("raw" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesClaudeClaudeError: play.api.libs.json.Writes[ClaudeError] = {
      (obj: com.bryzek.claude.v0.models.ClaudeError) => {
        com.bryzek.claude.v0.models.json.jsObjectClaudeError(obj)
      }
    }

    implicit def jsonReadsClaudeClaudeErrorResponse: play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeErrorResponse] = {
      (__ \ "error").read[com.bryzek.claude.v0.models.ClaudeError].map { x => ClaudeErrorResponse(error = x) }
    }

    def jsObjectClaudeErrorResponse(obj: com.bryzek.claude.v0.models.ClaudeErrorResponse): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "error" -> com.bryzek.claude.v0.models.json.jsObjectClaudeError(obj.error)
      )
    }

    implicit def jsonWritesClaudeClaudeErrorResponse: play.api.libs.json.Writes[ClaudeErrorResponse] = {
      (obj: com.bryzek.claude.v0.models.ClaudeErrorResponse) => {
        com.bryzek.claude.v0.models.json.jsObjectClaudeErrorResponse(obj)
      }
    }

    implicit def jsonReadsClaudeClaudeMessage: play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeMessage] = {
      for {
        role <- (__ \ "role").read[com.bryzek.claude.v0.models.ClaudeRole]
        content <- (__ \ "content").read[Seq[com.bryzek.claude.v0.models.ClaudeContent]]
      } yield ClaudeMessage(role, content)
    }

    def jsObjectClaudeMessage(obj: com.bryzek.claude.v0.models.ClaudeMessage): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "role" -> play.api.libs.json.JsString(obj.role.toString),
        "content" -> play.api.libs.json.Json.toJson(obj.content)
      )
    }

    implicit def jsonWritesClaudeClaudeMessage: play.api.libs.json.Writes[ClaudeMessage] = {
      (obj: com.bryzek.claude.v0.models.ClaudeMessage) => {
        com.bryzek.claude.v0.models.json.jsObjectClaudeMessage(obj)
      }
    }

    implicit def jsonReadsClaudeClaudeRequest: play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeRequest] = {
      for {
        model <- (__ \ "model").read[com.bryzek.claude.v0.models.ClaudeModel]
        messages <- (__ \ "messages").read[Seq[com.bryzek.claude.v0.models.ClaudeMessage]]
        maxTokens <- (__ \ "max_tokens").read[Long]
        temperature <- (__ \ "temperature").readNullable[BigDecimal]
        system <- (__ \ "system").readNullable[String]
      } yield ClaudeRequest(model, messages, maxTokens, temperature, system)
    }

    def jsObjectClaudeRequest(obj: com.bryzek.claude.v0.models.ClaudeRequest): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "model" -> play.api.libs.json.JsString(obj.model.toString),
        "messages" -> play.api.libs.json.Json.toJson(obj.messages),
        "max_tokens" -> play.api.libs.json.JsNumber(obj.maxTokens)
      ) ++ (obj.temperature match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("temperature" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.system match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("system" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesClaudeClaudeRequest: play.api.libs.json.Writes[ClaudeRequest] = {
      (obj: com.bryzek.claude.v0.models.ClaudeRequest) => {
        com.bryzek.claude.v0.models.json.jsObjectClaudeRequest(obj)
      }
    }

    implicit def jsonReadsClaudeClaudeResponse: play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeResponse] = {
      for {
        id <- (__ \ "id").read[String]
        `type` <- (__ \ "type").read[String]
        role <- (__ \ "role").read[com.bryzek.claude.v0.models.ClaudeRole]
        content <- (__ \ "content").read[Seq[com.bryzek.claude.v0.models.ClaudeResponseContent]]
        model <- (__ \ "model").read[com.bryzek.claude.v0.models.ClaudeModel]
        stopReason <- (__ \ "stop_reason").read[com.bryzek.claude.v0.models.ClaudeStopReason]
        stopSequence <- (__ \ "stop_sequence").readNullable[String]
        usage <- (__ \ "usage").read[com.bryzek.claude.v0.models.ClaudeUsage]
      } yield ClaudeResponse(id, `type`, role, content, model, stopReason, stopSequence, usage)
    }

    def jsObjectClaudeResponse(obj: com.bryzek.claude.v0.models.ClaudeResponse): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "type" -> play.api.libs.json.JsString(obj.`type`),
        "role" -> play.api.libs.json.JsString(obj.role.toString),
        "content" -> play.api.libs.json.Json.toJson(obj.content),
        "model" -> play.api.libs.json.JsString(obj.model.toString),
        "stop_reason" -> play.api.libs.json.JsString(obj.stopReason.toString),
        "usage" -> com.bryzek.claude.v0.models.json.jsObjectClaudeUsage(obj.usage)
      ) ++ (obj.stopSequence match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("stop_sequence" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesClaudeClaudeResponse: play.api.libs.json.Writes[ClaudeResponse] = {
      (obj: com.bryzek.claude.v0.models.ClaudeResponse) => {
        com.bryzek.claude.v0.models.json.jsObjectClaudeResponse(obj)
      }
    }

    implicit def jsonReadsClaudeClaudeResponseContent: play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeResponseContent] = {
      for {
        `type` <- (__ \ "type").read[com.bryzek.claude.v0.models.ClaudeContentType]
        text <- (__ \ "text").read[String]
      } yield ClaudeResponseContent(`type`, text)
    }

    def jsObjectClaudeResponseContent(obj: com.bryzek.claude.v0.models.ClaudeResponseContent): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "text" -> play.api.libs.json.JsString(obj.text)
      )
    }

    implicit def jsonWritesClaudeClaudeResponseContent: play.api.libs.json.Writes[ClaudeResponseContent] = {
      (obj: com.bryzek.claude.v0.models.ClaudeResponseContent) => {
        com.bryzek.claude.v0.models.json.jsObjectClaudeResponseContent(obj)
      }
    }

    implicit def jsonReadsClaudeClaudeUsage: play.api.libs.json.Reads[com.bryzek.claude.v0.models.ClaudeUsage] = {
      for {
        inputTokens <- (__ \ "input_tokens").read[Long]
        outputTokens <- (__ \ "output_tokens").read[Long]
      } yield ClaudeUsage(inputTokens, outputTokens)
    }

    def jsObjectClaudeUsage(obj: com.bryzek.claude.v0.models.ClaudeUsage): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "input_tokens" -> play.api.libs.json.JsNumber(obj.inputTokens),
        "output_tokens" -> play.api.libs.json.JsNumber(obj.outputTokens)
      )
    }

    implicit def jsonWritesClaudeClaudeUsage: play.api.libs.json.Writes[ClaudeUsage] = {
      (obj: com.bryzek.claude.v0.models.ClaudeUsage) => {
        com.bryzek.claude.v0.models.json.jsObjectClaudeUsage(obj)
      }
    }

    implicit def jsonReadsClaudeMessage: play.api.libs.json.Reads[com.bryzek.claude.v0.models.Message] = {
      (__ \ "placeholder").readNullable[String].map { x => Message(placeholder = x) }
    }

    def jsObjectMessage(obj: com.bryzek.claude.v0.models.Message): play.api.libs.json.JsObject = {
      (obj.placeholder match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("placeholder" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesClaudeMessage: play.api.libs.json.Writes[Message] = {
      (obj: com.bryzek.claude.v0.models.Message) => {
        com.bryzek.claude.v0.models.json.jsObjectMessage(obj)
      }
    }
  }
}

package com.bryzek.claude.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import com.bryzek.claude.v0.models._

      val claudeContentTypeConverter: ApibuilderTypeConverter[com.bryzek.claude.v0.models.ClaudeContentType] = new ApibuilderTypeConverter[com.bryzek.claude.v0.models.ClaudeContentType] {
        override def convert(value: String): com.bryzek.claude.v0.models.ClaudeContentType = com.bryzek.claude.v0.models.ClaudeContentType(value)
        override def convert(value: com.bryzek.claude.v0.models.ClaudeContentType): String = value.toString
        override def example: com.bryzek.claude.v0.models.ClaudeContentType = com.bryzek.claude.v0.models.ClaudeContentType.Text
        override def validValues: Seq[com.bryzek.claude.v0.models.ClaudeContentType] = com.bryzek.claude.v0.models.ClaudeContentType.all
      }
      implicit def pathBindableClaudeContentType(implicit stringBinder: QueryStringBindable[String]): PathBindable[com.bryzek.claude.v0.models.ClaudeContentType] = ApibuilderPathBindable(claudeContentTypeConverter)
      implicit def queryStringBindableClaudeContentType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[com.bryzek.claude.v0.models.ClaudeContentType] = ApibuilderQueryStringBindable(claudeContentTypeConverter)

      val claudeModelConverter: ApibuilderTypeConverter[com.bryzek.claude.v0.models.ClaudeModel] = new ApibuilderTypeConverter[com.bryzek.claude.v0.models.ClaudeModel] {
        override def convert(value: String): com.bryzek.claude.v0.models.ClaudeModel = com.bryzek.claude.v0.models.ClaudeModel(value)
        override def convert(value: com.bryzek.claude.v0.models.ClaudeModel): String = value.toString
        override def example: com.bryzek.claude.v0.models.ClaudeModel = com.bryzek.claude.v0.models.ClaudeModel.ClaudeSonnet420250514
        override def validValues: Seq[com.bryzek.claude.v0.models.ClaudeModel] = com.bryzek.claude.v0.models.ClaudeModel.all
      }
      implicit def pathBindableClaudeModel(implicit stringBinder: QueryStringBindable[String]): PathBindable[com.bryzek.claude.v0.models.ClaudeModel] = ApibuilderPathBindable(claudeModelConverter)
      implicit def queryStringBindableClaudeModel(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[com.bryzek.claude.v0.models.ClaudeModel] = ApibuilderQueryStringBindable(claudeModelConverter)

      val claudeRoleConverter: ApibuilderTypeConverter[com.bryzek.claude.v0.models.ClaudeRole] = new ApibuilderTypeConverter[com.bryzek.claude.v0.models.ClaudeRole] {
        override def convert(value: String): com.bryzek.claude.v0.models.ClaudeRole = com.bryzek.claude.v0.models.ClaudeRole(value)
        override def convert(value: com.bryzek.claude.v0.models.ClaudeRole): String = value.toString
        override def example: com.bryzek.claude.v0.models.ClaudeRole = com.bryzek.claude.v0.models.ClaudeRole.User
        override def validValues: Seq[com.bryzek.claude.v0.models.ClaudeRole] = com.bryzek.claude.v0.models.ClaudeRole.all
      }
      implicit def pathBindableClaudeRole(implicit stringBinder: QueryStringBindable[String]): PathBindable[com.bryzek.claude.v0.models.ClaudeRole] = ApibuilderPathBindable(claudeRoleConverter)
      implicit def queryStringBindableClaudeRole(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[com.bryzek.claude.v0.models.ClaudeRole] = ApibuilderQueryStringBindable(claudeRoleConverter)

      val claudeStopReasonConverter: ApibuilderTypeConverter[com.bryzek.claude.v0.models.ClaudeStopReason] = new ApibuilderTypeConverter[com.bryzek.claude.v0.models.ClaudeStopReason] {
        override def convert(value: String): com.bryzek.claude.v0.models.ClaudeStopReason = com.bryzek.claude.v0.models.ClaudeStopReason(value)
        override def convert(value: com.bryzek.claude.v0.models.ClaudeStopReason): String = value.toString
        override def example: com.bryzek.claude.v0.models.ClaudeStopReason = com.bryzek.claude.v0.models.ClaudeStopReason.EndTurn
        override def validValues: Seq[com.bryzek.claude.v0.models.ClaudeStopReason] = com.bryzek.claude.v0.models.ClaudeStopReason.all
      }
      implicit def pathBindableClaudeStopReason(implicit stringBinder: QueryStringBindable[String]): PathBindable[com.bryzek.claude.v0.models.ClaudeStopReason] = ApibuilderPathBindable(claudeStopReasonConverter)
      implicit def queryStringBindableClaudeStopReason(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[com.bryzek.claude.v0.models.ClaudeStopReason] = ApibuilderQueryStringBindable(claudeStopReasonConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package com.bryzek.claude.v0 {

  object Constants {

    val BaseUrl = "https://api.anthropic.com"
    val Namespace = "com.bryzek.claude.v0"
    val UserAgent = "apibuilder app.apibuilder.io/bryzek/claude/latest/play_2_9_scala_3_client"
    val Version = "0.7.61"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String = "https://api.anthropic.com",
    auth: scala.Option[com.bryzek.claude.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import com.bryzek.claude.v0.models.json._

    private val logger = play.api.Logger("com.bryzek.claude.v0.Client")

    logger.info(s"Initializing com.bryzek.claude.v0.Client for url $baseUrl")

    def messages: Messages = Messages

    object Messages extends Messages {
      override def post(
        claudeRequest: com.bryzek.claude.v0.models.ClaudeRequest,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.claude.v0.models.ClaudeResponse] = {
        val payload = play.api.libs.json.Json.toJson(claudeRequest)

        _executeRequest("POST", s"/v1/messages", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.bryzek.claude.v0.Client.parseJson("com.bryzek.claude.v0.models.ClaudeResponse", r, _.validate[com.bryzek.claude.v0.models.ClaudeResponse])
          case r if r.status == 400 => throw com.bryzek.claude.v0.errors.ClaudeErrorResponseResponse(r)
          case r if r.status == 401 => throw com.bryzek.claude.v0.errors.ClaudeErrorResponseResponse(r)
          case r if r.status == 403 => throw com.bryzek.claude.v0.errors.ClaudeErrorResponseResponse(r)
          case r if r.status == 429 => throw com.bryzek.claude.v0.errors.ClaudeErrorResponseResponse(r)
          case r if r.status == 500 => throw com.bryzek.claude.v0.errors.ClaudeErrorResponseResponse(r)
          case r => throw com.bryzek.claude.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 400, 401, 403, 429, 500")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method '$url'")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' '$url'")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    ): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      import play.api.libs.ws.WSBodyWritables.writeableOf_JsValue

      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders*).addQueryStringParameters(queryParameters*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders)*).addQueryStringParameters(queryParameters*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders)*).addQueryStringParameters(queryParameters*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders*).addQueryStringParameters(queryParameters*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders*).addQueryStringParameters(queryParameters*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders*).addQueryStringParameters(queryParameters*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders*).addQueryStringParameters(queryParameters*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders*).addQueryStringParameters(queryParameters*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq("Content-Type" -> "application/json; charset=UTF-8")
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw com.bryzek.claude.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def messages: com.bryzek.claude.v0.Messages
    }

  }

  trait Messages {
    def post(
      claudeRequest: com.bryzek.claude.v0.models.ClaudeRequest,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.claude.v0.models.ClaudeResponse]
  }

  package errors {

    import com.bryzek.claude.v0.models.json._

    final case class ClaudeErrorResponseResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(s"${response.status}: ${response.body}")) {
      lazy val claudeErrorResponse = _root_.com.bryzek.claude.v0.Client.parseJson("com.bryzek.claude.v0.models.ClaudeErrorResponse", response, _.validate[com.bryzek.claude.v0.models.ClaudeErrorResponse])
    }

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}